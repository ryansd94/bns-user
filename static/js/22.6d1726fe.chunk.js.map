{"version":3,"sources":["views/signup/Signup/Signup.js"],"names":["Signup","search","useLocation","t","useTranslation","token","queryString","parse","history","useDispatch","useHistory","useState","error","password","setPassword","loading","passwordAgain","setPasswordAgain","passwordIsvalid","setPasswordIsvalid","tokenIsvalid","React","confirmPassword","fullName","values","setValues","validationSchema","Yup","shape","required","message","fieldNotEmpty","useForm","resolver","yupResolver","defaultValues","control","register","handleSubmit","onSubmit","reset","setValue","formState","errors","data","a","find","replace","dataToken","RegExp","registerGoogle","res","dataResult","errorCode","ERROR_CODE","success","userInfo","accessToken","refreshToken","shopIndex","user","isAdmin","acceptScreen","setTokenLoginSucceeded","push","className","component","sx","m","noValidate","autoComplete","container","rowSpacing","item","xs","autoFocus","label","name","type","onChange","text","toLowerCase","inputProps","form","startAdornment","position","endAdornment","onClick","showPassword","onMouseDown","event","preventDefault","edge","InputProps","rules","minLength","value","valueAgain","isValid","messages","notEmpty","number","lowercase","match","severity","variant"],"mappings":"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","file":"static/js/22.6d1726fe.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nimport { useLocation, useHistory } from \"react-router-dom\"\r\nimport queryString from \"query-string\"\r\nimport TextInput from \"components/input/TextInput\"\r\nimport Grid from \"@mui/material/Grid\"\r\nimport Box from \"@mui/material/Box\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport Button from \"@mui/material/Button\"\r\nimport { useForm } from \"react-hook-form\"\r\nimport InputAdornment from \"@mui/material/InputAdornment\"\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport FormControl from \"@mui/material/FormControl\"\r\nimport Visibility from \"@mui/icons-material/Visibility\"\r\nimport VisibilityOff from \"@mui/icons-material/VisibilityOff\"\r\nimport InputLabel from \"@mui/material/InputLabel\"\r\nimport IconButton from \"@mui/material/IconButton\"\r\nimport OutlinedInput from \"@mui/material/OutlinedInput\"\r\nimport * as Yup from \"yup\"\r\nimport { message } from \"configs\"\r\nimport { yupResolver } from \"@hookform/resolvers/yup\"\r\nimport AccountCircle from \"@mui/icons-material/AccountCircle\"\r\nimport Alert from \"@mui/material/Alert\"\r\nimport { validateTokenSignup, registerGoogle } from \"services\"\r\nimport { ERROR_CODE } from \"configs\"\r\nimport {\r\n  resetUserToken,\r\n  setTokenLoginSucceeded,\r\n  getAccessToken,\r\n} from \"helpers\"\r\nimport PasswordChecklist from \"react-password-checklist\"\r\nimport Spinner from \"components/shared/Spinner\"\r\nimport { openMessage } from \"stores/components/snackbar\"\r\n\r\nexport default function Signup() {\r\n  const { search } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { token } = queryString.parse(search)\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n  const [error, setError] = useState(\"\")\r\n  const [password, setPassword] = useState(\"\")\r\n  const [loading, setLoading] = useState(false)\r\n  const [passwordAgain, setPasswordAgain] = useState(\"\")\r\n  const [passwordIsvalid, setPasswordIsvalid] = useState(false)\r\n  const [tokenIsvalid, setTokenIsvalid] = useState(true)\r\n  const [values, setValues] = React.useState({\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    fullName: \"\",\r\n  })\r\n  function escapeRegExp(string) {\r\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\") // $& means the whole matched string\r\n  }\r\n\r\n  function replaceAll(str, find, replace) {\r\n    return str.replace(new RegExp(escapeRegExp(find), \"g\"), replace)\r\n  }\r\n  //   useEffect(() => {\r\n  //     if (token) {\r\n  //       const data = replaceAll(token, \" \", \"+\")\r\n  //       validateToken(data)\r\n  //     }\r\n  //   }, [])\r\n  const validateToken = async (token) => {\r\n    const res = await validateTokenSignup({ token: token })\r\n    if (res.errorCode == ERROR_CODE.success) {\r\n      setTokenIsvalid(true)\r\n    } else {\r\n      setError(res.title)\r\n    }\r\n    setLoading(false)\r\n  }\r\n  const handleChange = (prop) => (event) => {\r\n    setValues({ ...values, [prop]: event.target.value })\r\n  }\r\n  const handleClickShowPassword = () => {\r\n    setValues({\r\n      ...values,\r\n      showPassword: !values.showPassword,\r\n    })\r\n  }\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    fullName: Yup.string().required(t(message.error.fieldNotEmpty)),\r\n  })\r\n  const defaultValues = {\r\n    fullName: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  }\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault()\r\n  }\r\n\r\n  const {\r\n    register,\r\n    control,\r\n    handleSubmit,\r\n    reset,\r\n    setValue,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(validationSchema),\r\n    defaultValues: defaultValues,\r\n  })\r\n  const onSubmit = async (data) => {\r\n    // alert(passwordIsvalid)\r\n    // return\r\n    if (!passwordIsvalid) return\r\n\r\n    const dataToken = replaceAll(token, \" \", \"+\")\r\n    data.token = dataToken\r\n    const res = await registerGoogle(data)\r\n    const dataResult = res && res.data\r\n    if (dataResult.errorCode == ERROR_CODE.success) {\r\n      const userInfo = dataResult.data\r\n      const token = {\r\n        accessToken: userInfo.token,\r\n        refreshToken: userInfo.token,\r\n        shopIndex: userInfo.shopIndex,\r\n      }\r\n      const user = { ...userInfo, isAdmin: true, acceptScreen: [] }\r\n      setTokenLoginSucceeded({ token, user })\r\n      history.push(`/dashboard`)\r\n    }\r\n    // dispatch(openMessage({ ...res }))\r\n  }\r\n  const onChangePasswordAgain = (text) => {\r\n    setPasswordAgain(text.toLowerCase())\r\n  }\r\n\r\n  const onChangePassword = (text) => {\r\n    setPassword(text.toLowerCase())\r\n  }\r\n\r\n  return loading ? (\r\n    <Spinner className={\"spinnerWrapperMaster\"}></Spinner>\r\n  ) : (\r\n    <div>\r\n      <div className=\"d-flex align-items-center auth px-0\">\r\n        <div className=\"row w-100 mx-0\">\r\n          <div className=\"col-lg-4 mx-auto\">\r\n            <div className=\"auth-form-light text-left py-5 px-4 px-sm-5\">\r\n              <Box\r\n                component=\"form\"\r\n                sx={{\r\n                  \"& > :not(style)\": { m: 1 },\r\n                }}\r\n                noValidate\r\n                autoComplete=\"off\"\r\n              >\r\n                <Grid container rowSpacing={2}>\r\n                  <Grid item xs={12}>\r\n                    <h3>{t(\"Tạo tài khoản BNS\")}</h3>\r\n                  </Grid>\r\n                  {tokenIsvalid ? (\r\n                    <Grid container rowSpacing={2}>\r\n                      \r\n                      <Grid item xs={12}>\r\n                        <span className=\"text-note\">\r\n                          {t(\"Nhập Họ và tên bạn muốn hiển thị\")}\r\n                        </span>\r\n                        <TextInput\r\n                          autoFocus={true}\r\n                          required={true}\r\n                          control={control}\r\n                          label={t(\"Họ tên đầy đủ\")}\r\n                          name=\"fullName\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={12}>\r\n                        <TextInput\r\n                          required={true}\r\n                          control={control}\r\n                          label={t(\"Mật khẩu\")}\r\n                          name=\"password\"\r\n                          type={\"password\"}\r\n                          onChange={onChangePassword}\r\n                          inputProps={{\r\n                            autoComplete: \"new-password\",\r\n                            form: {\r\n                              autoComplete: \"off\",\r\n                            },\r\n                            startAdornment: (\r\n                              <InputAdornment position=\"start\">\r\n                                <AccountCircle />\r\n                              </InputAdornment>\r\n                            ),\r\n                            endAdornment: (\r\n                              <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                  aria-label=\"toggle password visibility\"\r\n                                  onClick={handleClickShowPassword}\r\n                                  onMouseDown={handleMouseDownPassword}\r\n                                  edge=\"end\"\r\n                                >\r\n                                  {values.showPassword ? (\r\n                                    <VisibilityOff />\r\n                                  ) : (\r\n                                    <Visibility />\r\n                                  )}\r\n                                </IconButton>\r\n                              </InputAdornment>\r\n                            ),\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={12}>\r\n                        <TextInput\r\n                          required={true}\r\n                          control={control}\r\n                          label={t(\"Nhập lại mật khẩu\")}\r\n                          name=\"confirmPassword\"\r\n                          type={\"password\"}\r\n                          onChange={onChangePasswordAgain}\r\n                          InputProps={{\r\n                            autoComplete: \"new-password\",\r\n                            form: {\r\n                              autoComplete: \"off\",\r\n                            },\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={12}>\r\n                        <PasswordChecklist\r\n                          rules={[\r\n                            \"notEmpty\",\r\n                            \"minLength\",\r\n                            \"number\",\r\n                            \"lowercase\",\r\n                            \"match\",\r\n                          ]}\r\n                          minLength={6}\r\n                          value={password}\r\n                          valueAgain={passwordAgain}\r\n                          onChange={(isValid) => setPasswordIsvalid(isValid)}\r\n                          messages={{\r\n                            minLength: t(\"Mật khẩu tối thiểu 6 ký tự\"),\r\n                            notEmpty: t(\r\n                              \"Mật khẩu và nhập lại mật khẩu không được trống\"\r\n                            ),\r\n                            number: t(\"Mật khẩu phải chứa 1 chữ số\"),\r\n                            lowercase: t(\"Mật khẩu phải chứa 1 ký tự\"),\r\n                            match: t(\"Nhập lại mật khẩu không trùng khớp\"),\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  ) : (\r\n                    <Alert severity=\"error\">{error}</Alert>\r\n                  )}\r\n                </Grid>\r\n                {tokenIsvalid ? (\r\n                  <Button onClick={handleSubmit(onSubmit)} variant=\"contained\">\r\n                    Sign in\r\n                  </Button>\r\n                ) : (\r\n                  <div></div>\r\n                )}\r\n              </Box>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/label/labelControl.js","services/base.js","services/account/account.service.js","services/category/team/team.service.js","services/category/area/area.service.js","services/user/user.service.js","services/configs/filter.service.js","services/common/common.service.js","components/input/TextInput.js"],"names":["LabelControl","props","label","required","className","Typography","style","color","createInstance","instance","axios","create","baseURL","process","headers","paramsSerializer","params","queryString","stringify","interceptors","request","use","token","getAccessToken","Authorization","response","status","httpStatus","data","error","a","originalRequest","config","UNAUTHORIZED","_retry","resetRefreshTokenFailure","Promise","reject","baseUrl","login","post","res","loginGoogle","registerGoogle","param","query","services","getTeamByID","id","get","saveTeam","put","signup","sendMailUser","validateTokenSignup","save","_","isEmpty","buildQueryString","getByID","deleteData","delete","TextInput","control","name","autoFocus","hidden","inputProps","type","size","disabled","variant","fullWidth","multiline","defaultValue","placeholder","focused","onChange","loadingPopup","useSelector","state","master","render","field","fieldState","width","_ControlSizeDefault","EVariant","outlined","value","rows","maxRows","helperText","message","_TemplateVariant","autoComplete","e","target","normal","valueChange","parseFloat","sx","overflow","textOverflow"],"mappings":"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","file":"static/js/5.aa2abd4b.chunk.js","sourcesContent":["import React from \"react\"\r\nimport Typography from '@mui/material/Typography'\r\n\r\nconst LabelControl = (props) => {\r\n    const { label, required = false, className } = props\r\n    return <Typography className={`label-title ${className}`}>{label}{required ? <span style={{ color: 'red' }}>*</span> : ''}</Typography>\r\n}\r\n\r\nexport default LabelControl","import axios from 'axios';\r\nimport httpStatus from 'http-status';\r\nimport { getAccessToken, setRefreshTokenSucceeded, resetRefreshTokenFailure } from './../helpers';\r\n\r\nimport queryString from 'query-string';\r\nexport const createInstance = () => {\r\n    // const { origin } = window && window.location;\r\n    const instance = axios.create({\r\n        baseURL: `${process.env.REACT_APP_API_URL}/api`,\r\n        headers: {\r\n            'content-type': 'application/json',\r\n        },\r\n        paramsSerializer: params => queryString.stringify(params),\r\n    });\r\n\r\n    instance.interceptors.request.use(request => {\r\n        const token = getAccessToken();\r\n        request.headers.Authorization = `Bearer ${token}`;\r\n        return request;\r\n    });\r\n\r\n    instance.interceptors.response.use(\r\n        response => {\r\n            if (response.status === httpStatus[200]) {\r\n                if (response.data.status === httpStatus[200]) {\r\n\r\n                }\r\n                else {\r\n\r\n                }\r\n            }\r\n            return response.data;\r\n        },\r\n        async error => {\r\n            const originalRequest = error.config;\r\n            if (error.response.status === httpStatus.UNAUTHORIZED && !originalRequest._retry) {\r\n                // not working well\r\n                // originalRequest._retry = true;\r\n                // return refreshTokenAndRecallRequest(originalRequest);\r\n                // log out \r\n                resetRefreshTokenFailure();\r\n                //window.location.reload();\r\n            }\r\n            return Promise.reject(error);\r\n        },\r\n    );\r\n\r\n    return instance;\r\n};\r\n","import axios from 'axios';\r\nimport { createInstance } from '../base';\r\nimport { getRefreshToken, getUserInfo, resetRefreshTokenFailure } from '../../helpers';\r\nconst baseUrl = `${process.env.REACT_APP_API_URL}/api/account`;\r\n\r\nexport const login = async data => {\r\n    try {\r\n        const res = await axios.post(`${baseUrl}/authenticate`, data);\r\n        return res;\r\n    } catch (error) {\r\n        const { request, response } = error;\r\n        if (request) {\r\n            return request;\r\n        }\r\n        if (response) {\r\n            return response;\r\n        }\r\n        return error;\r\n    }\r\n};\r\n\r\nexport const loginGoogle = async data => {\r\n    try {\r\n        const res = await axios.post(`${baseUrl}/login-google`, data);\r\n        return res;\r\n    } catch (error) {\r\n        const { request, response } = error;\r\n        if (request) {\r\n            return request;\r\n        }\r\n        if (response) {\r\n            return response;\r\n        }\r\n        return error;\r\n    }\r\n};\r\n\r\nexport const registerGoogle = async (param) => {\r\n    try {\r\n      const query = `${baseUrl}/register-google`;\r\n      const res = await axios.post(query, param);\r\n      return res;\r\n    } catch (error) {\r\n      const { request, response } = error;\r\n      if (request) {\r\n        return request;\r\n      }\r\n      if (response) {\r\n        return response;\r\n      }\r\n      return error;\r\n    }\r\n  };","import { createInstance, handleError } from \"../../base\";\r\nimport { buildQueryString } from \"helpers\";\r\nconst baseUrl = \"/jm_team\";\r\n\r\nconst services = createInstance(\"/api\");\r\nexport const getTeam = async (param) => {\r\n  try {\r\n    let query = `${baseUrl}`;\r\n    if (param) {\r\n      query += buildQueryString(param);\r\n    }\r\n    const res = await services.get(query);\r\n    return res;\r\n  } catch (error) {\r\n    const { request, response } = error;\r\n    if (request) {\r\n      return request;\r\n    }\r\n    if (response) {\r\n      return response;\r\n    }\r\n    return error;\r\n  }\r\n};\r\nexport const getTeamByID = async (id) => {\r\n  try {\r\n    let query = `${baseUrl}/${id}`;\r\n    const res = await services.get(query);\r\n    return res;\r\n  } catch (error) {\r\n    const { request, response } = error;\r\n    if (request) {\r\n      return request;\r\n    }\r\n    if (response) {\r\n      return response;\r\n    }\r\n    return error;\r\n  }\r\n};\r\nexport const saveTeam = async (param) => {\r\n  try {\r\n    const query = `${baseUrl}`;\r\n    if (!param.id) {\r\n      const res = await services.post(query, param);\r\n      return res;\r\n    } else {\r\n      const res = await services.put(`${baseUrl}/${param.id}`, param);\r\n      return res;\r\n    }\r\n  } catch (error) {\r\n    const { request, response } = error;\r\n    if (request) {\r\n      return request;\r\n    }\r\n    if (response) {\r\n      return response;\r\n    }\r\n    return error;\r\n  }\r\n};\r\nexport const deleteTeam = async (id) => {\r\n  try {\r\n    let query = `${baseUrl}/${id}`;\r\n    const res = await services.delete(query);\r\n    return res;\r\n  } catch (error) {\r\n    const { request, response } = error;\r\n    if (request) {\r\n      return request;\r\n    }\r\n    if (response) {\r\n      return response;\r\n    }\r\n    return error;\r\n  }\r\n};\r\n","import { createInstance, handleError } from '../../base';\r\nconst baseUrl = '/cf_area';\r\nconst services = createInstance('/api');\r\nexport const getArea = async param => {\r\n    try {\r\n        const query = `${baseUrl}/GetAllData`;\r\n        const res = await services.post(query, param);\r\n        return res;\r\n    }\r\n    catch (error) {\r\n        const { request, response } = error;\r\n        if (request) {\r\n            return request;\r\n        }\r\n        if (response) {\r\n            return response;\r\n        }\r\n        return error;\r\n    }\r\n};\r\nexport const postArea = async param => {\r\n    try {\r\n        const query = `${baseUrl}`;\r\n        const res = await services.post(query, param);\r\n        return res;\r\n    }\r\n    catch (error) {\r\n        const { request, response } = error;\r\n        if (request) {\r\n            return request;\r\n        }\r\n        if (response) {\r\n            return response;\r\n        }\r\n        return error;\r\n    }\r\n};","import { createInstance, handleError } from \"services/base\"\r\nimport { buildQueryString } from \"helpers\"\r\nconst baseUrl = \"/jm_user\"\r\n\r\nconst services = createInstance(\"/api\")\r\nexport const getUser = async (param) => {\r\n  try {\r\n    let query = `${baseUrl}`\r\n    if (param) {\r\n      query += buildQueryString(param)\r\n    }\r\n    const res = await services.get(query)\r\n    return res\r\n  } catch (error) {\r\n    const { request, response } = error\r\n    if (request) {\r\n      return request\r\n    }\r\n    if (response) {\r\n      return response\r\n    }\r\n    return error\r\n  }\r\n}\r\nexport const getTeamByID = async (id) => {\r\n  try {\r\n    let query = `${baseUrl}/${id}`\r\n    const res = await services.get(query)\r\n    return res\r\n  } catch (error) {\r\n    const { request, response } = error\r\n    if (request) {\r\n      return request\r\n    }\r\n    if (response) {\r\n      return response\r\n    }\r\n    return error\r\n  }\r\n}\r\nexport const saveUser = async (param) => {\r\n  try {\r\n    const query = `${baseUrl}`\r\n    if (!param.id) {\r\n      const res = await services.post(query, param)\r\n      return res\r\n    } else {\r\n      const res = await services.put(`${baseUrl}/${param.id}`, param)\r\n      return res\r\n    }\r\n  } catch (error) {\r\n    const { request, response } = error\r\n    if (request) {\r\n      return request\r\n    }\r\n    if (response) {\r\n      return response\r\n    }\r\n    return error\r\n  }\r\n}\r\n\r\n\r\n\r\nexport const updateUserStatus = async (param) => {\r\n  try {\r\n    const query = `${baseUrl}/status`\r\n    const res = await services.put(query, param)\r\n    return res\r\n  } catch (error) {\r\n    const { request, response } = error\r\n    if (request) {\r\n      return request\r\n    }\r\n    if (response) {\r\n      return response\r\n    }\r\n    return error\r\n  }\r\n}\r\nexport const signup = async (param) => {\r\n  try {\r\n    const query = `${baseUrl}/signup`\r\n    const res = await services.post(query, param)\r\n    return res\r\n  } catch (error) {\r\n    const { request, response } = error\r\n    if (request) {\r\n      return request\r\n    }\r\n    if (response) {\r\n      return response\r\n    }\r\n    return error\r\n  }\r\n}\r\nexport const deleteUser = async (id) => {\r\n  try {\r\n    let query = `${baseUrl}/${id}`\r\n    const res = await services.delete(query)\r\n    return res\r\n  } catch (error) {\r\n    const { request, response } = error\r\n    if (request) {\r\n      return request\r\n    }\r\n    if (response) {\r\n      return response\r\n    }\r\n    return error\r\n  }\r\n}\r\nexport const sendMailUser = async (param) => {\r\n  try {\r\n    const query = `${baseUrl}/add-user`\r\n    const res = await services.post(query, param)\r\n    return res\r\n  } catch (error) {\r\n    const { request, response } = error\r\n    if (request) {\r\n      return request\r\n    }\r\n    if (response) {\r\n      return response\r\n    }\r\n    return error\r\n  }\r\n}\r\nexport const validateTokenSignup = async (param) => {\r\n  try {\r\n    const query = `${baseUrl}/validate-signup`\r\n    const res = await services.post(query, param)\r\n    return res\r\n  } catch (error) {\r\n    const { request, response } = error\r\n    if (request) {\r\n      return request\r\n    }\r\n    if (response) {\r\n      return response\r\n    }\r\n    return error\r\n  }\r\n}\r\n","import { createInstance, handleError } from \"services/base\";\r\nimport { buildQueryString } from \"helpers\";\r\nconst baseUrl = \"/sys_filter\";\r\n\r\nconst services = createInstance(\"/api\");\r\nexport const saveFilter = async (param) => {\r\n  try {\r\n    const query = `${baseUrl}`;\r\n    if (!param.id) {\r\n      const res = await services.post(query, param);\r\n      return res;\r\n    } else {\r\n      const res = await services.put(`${baseUrl}/${param.id}`, param);\r\n      return res;\r\n    }\r\n  } catch (error) {\r\n    const { request, response } = error;\r\n    if (request) {\r\n      return request;\r\n    }\r\n    if (response) {\r\n      return response;\r\n    }\r\n    return error;\r\n  }\r\n};","import { createInstance, handleError } from \"services/base\"\r\nimport { buildQueryString } from \"helpers\"\r\nimport _ from 'lodash'\r\n\r\nconst services = createInstance(\"/api\")\r\n\r\nexport const save = async (baseUrl, param) => {\r\n  try {\r\n    const query = `${baseUrl}`\r\n    if (_.isEmpty(param.id)) {\r\n      const res = await services.post(query, param)\r\n      return res\r\n    } else {\r\n      const res = await services.put(`${baseUrl}/${param.id}`, param)\r\n      return res\r\n    }\r\n  } catch (error) {\r\n    const { request, response } = error\r\n    if (request) {\r\n      return request\r\n    }\r\n    if (response) {\r\n      return response\r\n    }\r\n    return error\r\n  }\r\n}\r\n\r\nexport const get = async (baseUrl, param = null) => {\r\n  try {\r\n    let query = `${baseUrl}`\r\n    if (param) {\r\n      query += buildQueryString(param)\r\n    }\r\n    const res = await services.get(query)\r\n    return res\r\n  } catch (error) {\r\n    const { request, response } = error\r\n    if (request) {\r\n      return request\r\n    }\r\n    if (response) {\r\n      return response\r\n    }\r\n    return error\r\n  }\r\n}\r\n\r\nexport const getByID = async (baseUrl, id) => {\r\n  try {\r\n    let query = `${baseUrl}/${id}`\r\n    const res = await services.get(query)\r\n    return res\r\n  } catch (error) {\r\n    const { request, response } = error\r\n    if (request) {\r\n      return request\r\n    }\r\n    if (response) {\r\n      return response\r\n    }\r\n    return error\r\n  }\r\n}\r\n\r\nexport const deleteData = async (baseUrl, id) => {\r\n  try {\r\n    let query = `${baseUrl}/${id}`;\r\n    const res = await services.delete(query);\r\n    return res;\r\n  } catch (error) {\r\n    const { request, response } = error;\r\n    if (request) {\r\n      return request;\r\n    }\r\n    if (response) {\r\n      return response;\r\n    }\r\n    return error;\r\n  }\r\n}\r\n\r\nexport const post = async (baseUrl, param) => {\r\n  try {\r\n    const query = `${baseUrl}`\r\n    const res = await services.post(query, param)\r\n    return res\r\n  } catch (error) {\r\n    const { request, response } = error\r\n    if (request) {\r\n      return request\r\n    }\r\n    if (response) {\r\n      return response\r\n    }\r\n    return error\r\n  }\r\n}","import React from \"react\"\r\nimport TextField from \"@mui/material/TextField\"\r\nimport { Controller } from \"react-hook-form\"\r\nimport { useSelector } from \"react-redux\"\r\nimport Skeleton from \"@mui/material/Skeleton\"\r\nimport { _TemplateVariant, EVariant, _ControlSizeDefault } from \"configs\"\r\nimport { LabelControl } from 'components/label'\r\nimport _ from 'lodash'\r\n\r\nexport default function TextInput({\r\n  control,\r\n  required,\r\n  label,\r\n  name,\r\n  autoFocus,\r\n  hidden,\r\n  inputProps,\r\n  type = 'text',\r\n  size,\r\n  disabled,\r\n  variant,\r\n  fullWidth = true,\r\n  multiline,\r\n  defaultValue,\r\n  placeholder,\r\n  focused,\r\n  onChange,\r\n  style,\r\n  className = 'containerControl'\r\n}) {\r\n  const loadingPopup = useSelector((state) => state.master.loadingPopup)\r\n  return (\r\n    <Controller\r\n      render={({ field, fieldState: { error } }) =>\r\n        loadingPopup ? (\r\n          <Skeleton width={\"100%\"}\r\n            size={size ? size : _ControlSizeDefault} variant=\"text\">\r\n            <TextField\r\n              {...field}\r\n              fullWidth={fullWidth || false}\r\n              type={type || \"text\"}\r\n              inputProps={inputProps}\r\n              required={required}\r\n              variant={variant || EVariant.outlined}\r\n              error={!!error}\r\n              name={name}\r\n              value={field.value || defaultValue || ''}\r\n              multiline={multiline}\r\n              rows={multiline ? 2 : 1}\r\n              maxRows={multiline ? 4 : 1}\r\n              size={size ? size : _ControlSizeDefault}\r\n              helperText={error?.message}\r\n              label={_TemplateVariant === EVariant.outlined ? label : ''}\r\n              disabled={disabled ? disabled : false}\r\n              autoComplete=\"new-password\"\r\n              hidden={hidden ? true : false}\r\n              onChange={(e) => {\r\n                field.onChange(e.target.value)\r\n              }}\r\n              autoFocus={focused}\r\n            />\r\n          </Skeleton>\r\n        ) : (\r\n          <div className={className}>\r\n            {_TemplateVariant === EVariant.normal ? (label ? <LabelControl required={required} label={label} /> : '') : ''}\r\n            <TextField\r\n              {...field}\r\n              fullWidth={fullWidth || false}\r\n              type={type || \"text\"}\r\n              inputProps={inputProps}\r\n              required={required}\r\n              variant={variant || EVariant.outlined}\r\n              error={!!error}\r\n              name={name}\r\n              style={style}\r\n              focused={focused}\r\n              placeholder={placeholder}\r\n              value={field.value || defaultValue || ''}\r\n              multiline={multiline}\r\n              rows={multiline ? 2 : 1}\r\n              maxRows={multiline ? 4 : 1}\r\n              size={size ? size : _ControlSizeDefault}\r\n              helperText={error?.message}\r\n              label={_TemplateVariant === EVariant.outlined ? label : ''}\r\n              disabled={disabled ? disabled : false}\r\n              autoComplete=\"new-password\"\r\n              hidden={hidden ? true : false}\r\n              onChange={(e) => {\r\n                let valueChange = e.target.value\r\n                if (type === 'number') {\r\n                  if (!_.isEmpty(valueChange)) {\r\n                    valueChange = parseFloat(valueChange)\r\n                  } else {\r\n                    valueChange = null\r\n                  }\r\n                }\r\n                field.onChange(valueChange)\r\n                onChange && onChange(valueChange)\r\n              }}\r\n              sx={{\r\n                \"& .MuiInputBase-input\": {\r\n                  overflow: \"hidden\",\r\n                  textOverflow: \"ellipsis\"\r\n                }\r\n              }}\r\n              autoFocus={autoFocus}\r\n            />\r\n          </div>\r\n        )\r\n      }\r\n      name={name}\r\n      control={control && control}\r\n    />\r\n  )\r\n}\r\n"],"sourceRoot":""}
{"version":3,"sources":["views/home/Login.js","services/base.js","services/account/account.service.js","services/category/team/team.service.js","services/category/area/area.service.js","services/user/user.service.js","services/configs/filter.service.js","services/common/common.service.js","assets/images/logo-dark.svg"],"names":["Login","history","useHistory","React","useState","amount","password","weight","username","weightRange","showPassword","values","setValues","setIsSubmitting","dirty","msg","setError","handleChange","prop","event","target","value","useLayoutEffect","getAccessToken","push","firebase","initializeApp","apiKey","process","authDomain","uiConfig","signInFlow","signInSuccessUrl","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","callbacks","signInSuccessWithAuthResult","unregisterAuthObserver","onAuthStateChanged","user","a","getIdToken","token","loginGoogle","res","status","httpStatus","OK","data","errorCode","ERROR_CODE","userNotRegister","success","accessToken","refreshToken","shopIndex","isAdmin","acceptScreen","setTokenLoginSucceeded","resetUserToken","onLoginGoogleSuccess","login","userName","passWord","remember","errors","className","src","require","alt","component","sx","m","noValidate","autoComplete","fullWidth","htmlFor","id","onChange","label","variant","type","endAdornment","position","onClick","onMouseDown","preventDefault","edge","href","firebaseAuth","to","createInstance","instance","axios","create","baseURL","headers","paramsSerializer","params","queryString","stringify","interceptors","request","use","Authorization","response","error","originalRequest","config","UNAUTHORIZED","_retry","resetRefreshTokenFailure","Promise","reject","baseUrl","post","registerGoogle","param","query","services","getTeamByID","get","saveTeam","put","signup","sendMailUser","validateTokenSignup","save","_","isEmpty","buildQueryString","getByID","deleteData","delete"],"mappings":"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","file":"static/js/19.ed3df9f1.chunk.js","sourcesContent":["import React, { useState, useEffect, useLayoutEffect } from \"react\"\r\nimport { Link, useHistory } from \"react-router-dom\"\r\nimport { Form } from \"react-bootstrap\"\r\nimport Box from \"@mui/material/Box\"\r\nimport IconButton from \"@mui/material/IconButton\"\r\nimport OutlinedInput from \"@mui/material/OutlinedInput\"\r\nimport InputLabel from \"@mui/material/InputLabel\"\r\nimport InputAdornment from \"@mui/material/InputAdornment\"\r\nimport FormControl from \"@mui/material/FormControl\"\r\nimport Visibility from \"@mui/icons-material/Visibility\"\r\nimport VisibilityOff from \"@mui/icons-material/VisibilityOff\"\r\nimport {\r\n  resetUserToken,\r\n  setTokenLoginSucceeded,\r\n  getAccessToken,\r\n} from \"helpers\"\r\nimport { login, loginGoogle } from \"services\"\r\nimport httpStatus from \"http-status\"\r\nimport Button from \"@mui/material/Button\"\r\nimport { ERROR_CODE } from \"configs\"\r\nimport firebase from \"firebase/compat/app\"\r\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\"\r\nimport \"firebase/compat/auth\"\r\n\r\nexport default function Login() {\r\n  const history = useHistory()\r\n  const [values, setValues] = React.useState({\r\n    amount: \"\",\r\n    password: \"\",\r\n    weight: \"\",\r\n    username: \"\",\r\n    weightRange: \"\",\r\n    showPassword: false,\r\n  })\r\n  const [isSubmitting, setIsSubmitting] = useState(false)\r\n  const [error, setError] = useState({\r\n    dirty: false,\r\n    msg: \"\",\r\n  })\r\n\r\n  const handleChange = (prop) => (event) => {\r\n    setValues({ ...values, [prop]: event.target.value })\r\n  }\r\n\r\n  const handleClickShowPassword = () => {\r\n    setValues({\r\n      ...values,\r\n      showPassword: !values.showPassword,\r\n    })\r\n  }\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault()\r\n  }\r\n\r\n  const onLoginGoogleSuccess = () => { \r\n    const unregisterAuthObserver = firebase\r\n        .auth()\r\n        .onAuthStateChanged(async (user) => {\r\n          if (!user) {\r\n            return\r\n          }\r\n          const token = await user.getIdToken()\r\n          const res = await loginGoogle({\r\n            token: token,\r\n          })\r\n          switch (res.status) {\r\n            case httpStatus.OK: {\r\n              const { data } = res && res\r\n              if (data.errorCode == ERROR_CODE.userNotRegister) {\r\n                history.push(`/signup?token=${token}`)\r\n                break\r\n              } else if (data.errorCode != ERROR_CODE.success) {\r\n                setError({\r\n                  dirty: true,\r\n                  msg: \"tài hkoản hoặc mật khẩu sai\",\r\n                })\r\n                break\r\n              } else {\r\n                const { data } = res && res.data\r\n                const token = {\r\n                  accessToken: data.token,\r\n                  refreshToken: data.token,\r\n                  shopIndex: data.shopIndex,\r\n                }\r\n                const user = { ...data, isAdmin: true, acceptScreen: [] }\r\n                setTokenLoginSucceeded({ token, user })\r\n                setError({\r\n                  dirty: false,\r\n                  msg: \"\",\r\n                })\r\n                history.push(`/dashboard`)\r\n              }\r\n              break\r\n            }\r\n            default: {\r\n              setError({\r\n                dirty: true,\r\n                msg: \"Đã có lỗi xảy ra. Vui lòng thử lại sau\",\r\n              })\r\n              resetUserToken()\r\n              break\r\n            }\r\n          }\r\n        })\r\n        return () => unregisterAuthObserver()\r\n  }\r\n\r\n  function validate() {\r\n    let valid = true\r\n    return valid\r\n  }\r\n  useLayoutEffect(() => {\r\n    const tokenWeb = getAccessToken()\r\n    if (tokenWeb) history.push(`/dashboard`)\r\n    else {\r\n      // const unregisterAuthObserver = firebase\r\n      //   .auth()\r\n      //   .onAuthStateChanged(async (user) => {\r\n      //     if (!user) {\r\n      //       return\r\n      //     }\r\n      //     const token = await user.getIdToken()\r\n      //     const res = await loginGoogle({\r\n      //       token: token,\r\n      //     })\r\n      //     switch (res.status) {\r\n      //       case httpStatus.OK: {\r\n      //         const { data } = res && res\r\n      //         if (data.errorCode == ERROR_CODE.userNotRegister) {\r\n      //           history.push(`/signup?token=${token}`)\r\n      //           break\r\n      //         } else if (data.errorCode != ERROR_CODE.success) {\r\n      //           setError({\r\n      //             dirty: true,\r\n      //             msg: \"tài hkoản hoặc mật khẩu sai\",\r\n      //           })\r\n      //           break\r\n      //         } else {\r\n      //           const { data } = res && res.data\r\n      //           const token = {\r\n      //             accessToken: data.token,\r\n      //             refreshToken: data.token,\r\n      //             shopIndex: data.shopIndex,\r\n      //           }\r\n      //           const user = { ...data, isAdmin: true, acceptScreen: [] }\r\n      //           setTokenLoginSucceeded({ token, user })\r\n      //           setError({\r\n      //             dirty: false,\r\n      //             msg: \"\",\r\n      //           })\r\n      //           history.push(`/dashboard`)\r\n      //         }\r\n      //         break\r\n      //       }\r\n      //       default: {\r\n      //         setError({\r\n      //           dirty: true,\r\n      //           msg: \"Đã có lỗi xảy ra. Vui lòng thử lại sau\",\r\n      //         })\r\n      //         resetUserToken()\r\n      //         break\r\n      //       }\r\n      //     }\r\n      //   })\r\n      //   return () => unregisterAuthObserver()\r\n    }\r\n\r\n  }, [])\r\n  // Configure Firebase.\r\n  const config = {\r\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  }\r\n  firebase.initializeApp(config)\r\n  const uiConfig = {\r\n    signInFlow: \"redirect\",\r\n    signInSuccessUrl: \"/login\",\r\n    signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID],\r\n    callbacks: {\r\n      // Avoid redirects after sign-in.\r\n      signInSuccessWithAuthResult: () => {\r\n        onLoginGoogleSuccess()\r\n      },\r\n    },\r\n  }\r\n  async function handleSubmit() {\r\n    const valid = validate()\r\n    if (valid) {\r\n      setIsSubmitting(true)\r\n      const res = await login({\r\n        userName: values.username,\r\n        passWord: values.password,\r\n        remember: true,\r\n      })\r\n      setIsSubmitting(false)\r\n      switch (res.status) {\r\n        case httpStatus.OK: {\r\n          const { data, errors } = res && res\r\n          if (data.errorCode != ERROR_CODE.success) {\r\n            setError({\r\n              dirty: true,\r\n              msg: \"tài hkoản hoặc mật khẩu sai\",\r\n            })\r\n            break\r\n          } else {\r\n            const { data } = res && res.data\r\n            const token = {\r\n              accessToken: data.token,\r\n              refreshToken: data.token,\r\n              shopIndex: data.shopIndex,\r\n            }\r\n            const user = { ...data, isAdmin: true, acceptScreen: [] }\r\n            setTokenLoginSucceeded({ token, user })\r\n            setError({\r\n              dirty: false,\r\n              msg: \"\",\r\n            })\r\n            history.push(`/dashboard`)\r\n            //let checkRole = jwt_decode(data.jwToken)\r\n            //if (Array.isArray(checkRole.roles) && checkRole.roles.length > 0) {\r\n            //    const token = {\r\n            //        accessToken: data.jwToken,\r\n            //        refreshToken: data.refreshToken,\r\n            //    }\r\n            //    const user = { ...data, isAdmin: true, acceptScreen: [] }\r\n            //    setTokenLoginSucceeded({ token, user })\r\n            //    setError({\r\n            //        dirty: false,\r\n            //        msg: '',\r\n            //    })\r\n            //    history.push(`/`)\r\n            //} else {\r\n            //    let acceptScreen = JSON.parse(checkRole.api_access)\r\n            //    const token = {\r\n            //        accessToken: data.jwToken,\r\n            //        refreshToken: data.refreshToken,\r\n            //    }\r\n            //    const user = { ...data, isAdmin: false, acceptScreen }\r\n            //    setTokenLoginSucceeded({ token, user })\r\n            //    setError({\r\n            //        dirty: false,\r\n            //        msg: '',\r\n            //    })\r\n            //    history.push(`/`)\r\n            //}\r\n          }\r\n          break\r\n        }\r\n        default: {\r\n          setError({\r\n            dirty: true,\r\n            msg: \"Đã có lỗi xảy ra. Vui lòng thử lại sau\",\r\n          })\r\n          resetUserToken()\r\n          break\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"d-flex align-items-center auth px-0\">\r\n        <div className=\"row w-100 mx-0\">\r\n          <div className=\"col-lg-4 mx-auto\">\r\n            <div className=\"auth-form-light text-left py-5 px-4 px-sm-5\">\r\n              <div className=\"brand-logo\">\r\n                <img\r\n                  src={require(\"../../assets/images/logo-dark.svg\")}\r\n                  alt=\"logo\"\r\n                />\r\n              </div>\r\n              <h4>Hello! let's get started</h4>\r\n              <h6 className=\"font-weight-light\">Sign in to continue.</h6>\r\n              <Box\r\n                component=\"form\"\r\n                sx={{\r\n                  \"& > :not(style)\": { m: 1 },\r\n                }}\r\n                noValidate\r\n                autoComplete=\"off\"\r\n              >\r\n                <FormControl fullWidth>\r\n                  <InputLabel htmlFor=\"component-outlined\">UserName</InputLabel>\r\n                  <OutlinedInput\r\n                    id=\"component-outlined\"\r\n                    value={values.username}\r\n                    onChange={handleChange(\"username\")}\r\n                    label=\"UserName\"\r\n                  />\r\n                </FormControl>\r\n                <FormControl fullWidth sx={{ m: 1 }} variant=\"outlined\">\r\n                  <InputLabel htmlFor=\"outlined-adornment-password\">\r\n                    Password\r\n                  </InputLabel>\r\n                  <OutlinedInput\r\n                    id=\"outlined-adornment-password\"\r\n                    type={values.showPassword ? \"text\" : \"password\"}\r\n                    value={values.password}\r\n                    onChange={handleChange(\"password\")}\r\n                    endAdornment={\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                          aria-label=\"toggle password visibility\"\r\n                          onClick={handleClickShowPassword}\r\n                          onMouseDown={handleMouseDownPassword}\r\n                          edge=\"end\"\r\n                        >\r\n                          {values.showPassword ? (\r\n                            <VisibilityOff />\r\n                          ) : (\r\n                            <Visibility />\r\n                          )}\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    }\r\n                    label=\"Password\"\r\n                  />\r\n                </FormControl>\r\n                <Button variant=\"contained\" onClick={handleSubmit}>\r\n                  Sign in\r\n                </Button>\r\n              </Box>\r\n              <Form className=\"pt-3\">\r\n                <div className=\"my-2 d-flex justify-content-between align-items-center\">\r\n                  <div className=\"form-check\">\r\n                    <label className=\"form-check-label text-muted\">\r\n                      <input type=\"checkbox\" className=\"form-check-input\" />\r\n                      <i className=\"input-helper\"></i>\r\n                      Keep me signed in\r\n                    </label>\r\n                  </div>\r\n                  <a\r\n                    href=\"!#\"\r\n                    onClick={(event) => event.preventDefault()}\r\n                    className=\"auth-link text-black\"\r\n                  >\r\n                    Forgot password?\r\n                  </a>\r\n                </div>\r\n                <div className=\"mb-2\">\r\n                  <StyledFirebaseAuth\r\n                    uiConfig={uiConfig}\r\n                    firebaseAuth={firebase.auth()}\r\n                  />\r\n                </div>\r\n                <div className=\"text-center mt-4 font-weight-light\">\r\n                  Don't have an account?{\" \"}\r\n                  <Link to=\"/user-pages/register\" className=\"text-primary\">\r\n                    Create\r\n                  </Link>\r\n                </div>\r\n              </Form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import axios from 'axios';\nimport httpStatus from 'http-status';\nimport { getAccessToken, setRefreshTokenSucceeded, resetRefreshTokenFailure } from './../helpers';\n\nimport queryString from 'query-string';\nexport const createInstance = () => {\n    // const { origin } = window && window.location;\n    const instance = axios.create({\n        baseURL: `${process.env.REACT_APP_API_URL}/api`,\n        headers: {\n            'content-type': 'application/json',\n        },\n        paramsSerializer: params => queryString.stringify(params),\n    });\n\n    instance.interceptors.request.use(request => {\n        const token = getAccessToken();\n        request.headers.Authorization = `Bearer ${token}`;\n        return request;\n    });\n\n    instance.interceptors.response.use(\n        response => {\n            if (response.status === httpStatus[200]) {\n                if (response.data.status === httpStatus[200]) {\n\n                }\n                else {\n\n                }\n            }\n            return response.data;\n        },\n        async error => {\n            const originalRequest = error.config;\n            if (error.response.status === httpStatus.UNAUTHORIZED && !originalRequest._retry) {\n                // not working well\n                // originalRequest._retry = true;\n                // return refreshTokenAndRecallRequest(originalRequest);\n                // log out \n                resetRefreshTokenFailure();\n                //window.location.reload();\n            }\n            return Promise.reject(error);\n        },\n    );\n\n    return instance;\n};\n","import axios from 'axios';\r\nimport { createInstance } from '../base';\r\nimport { getRefreshToken, getUserInfo, resetRefreshTokenFailure } from '../../helpers';\r\nconst baseUrl = `${process.env.REACT_APP_API_URL}/api/account`;\r\n\r\nexport const login = async data => {\r\n    try {\r\n        const res = await axios.post(`${baseUrl}/login`, data);\r\n        return res;\r\n    } catch (error) {\r\n        const { request, response } = error;\r\n        if (request) {\r\n            return request;\r\n        }\r\n        if (response) {\r\n            return response;\r\n        }\r\n        return error;\r\n    }\r\n};\r\n\r\nexport const loginGoogle = async data => {\r\n    try {\r\n        const res = await axios.post(`${baseUrl}/login-google`, data);\r\n        return res;\r\n    } catch (error) {\r\n        const { request, response } = error;\r\n        if (request) {\r\n            return request;\r\n        }\r\n        if (response) {\r\n            return response;\r\n        }\r\n        return error;\r\n    }\r\n};\r\n\r\nexport const registerGoogle = async (param) => {\r\n    try {\r\n      const query = `${baseUrl}/register-google`;\r\n      const res = await axios.post(query, param);\r\n      return res;\r\n    } catch (error) {\r\n      const { request, response } = error;\r\n      if (request) {\r\n        return request;\r\n      }\r\n      if (response) {\r\n        return response;\r\n      }\r\n      return error;\r\n    }\r\n  };","import { createInstance, handleError } from \"../../base\";\nimport { buildQueryString } from \"helpers\";\nconst baseUrl = \"/jm_team\";\n\nconst services = createInstance(\"/api\");\nexport const getTeam = async (param) => {\n  try {\n    let query = `${baseUrl}`;\n    if (param) {\n      query += buildQueryString(param);\n    }\n    const res = await services.get(query);\n    return res;\n  } catch (error) {\n    const { request, response } = error;\n    if (request) {\n      return request;\n    }\n    if (response) {\n      return response;\n    }\n    return error;\n  }\n};\nexport const getTeamByID = async (id) => {\n  try {\n    let query = `${baseUrl}/${id}`;\n    const res = await services.get(query);\n    return res;\n  } catch (error) {\n    const { request, response } = error;\n    if (request) {\n      return request;\n    }\n    if (response) {\n      return response;\n    }\n    return error;\n  }\n};\nexport const saveTeam = async (param) => {\n  try {\n    const query = `${baseUrl}`;\n    if (!param.id) {\n      const res = await services.post(query, param);\n      return res;\n    } else {\n      const res = await services.put(`${baseUrl}/${param.id}`, param);\n      return res;\n    }\n  } catch (error) {\n    const { request, response } = error;\n    if (request) {\n      return request;\n    }\n    if (response) {\n      return response;\n    }\n    return error;\n  }\n};\nexport const deleteTeam = async (id) => {\n  try {\n    let query = `${baseUrl}/${id}`;\n    const res = await services.delete(query);\n    return res;\n  } catch (error) {\n    const { request, response } = error;\n    if (request) {\n      return request;\n    }\n    if (response) {\n      return response;\n    }\n    return error;\n  }\n};\n","import { createInstance, handleError } from '../../base';\nconst baseUrl = '/cf_area';\nconst services = createInstance('/api');\nexport const getArea = async param => {\n    try {\n        const query = `${baseUrl}/GetAllData`;\n        const res = await services.post(query, param);\n        return res;\n    }\n    catch (error) {\n        const { request, response } = error;\n        if (request) {\n            return request;\n        }\n        if (response) {\n            return response;\n        }\n        return error;\n    }\n};\nexport const postArea = async param => {\n    try {\n        const query = `${baseUrl}`;\n        const res = await services.post(query, param);\n        return res;\n    }\n    catch (error) {\n        const { request, response } = error;\n        if (request) {\n            return request;\n        }\n        if (response) {\n            return response;\n        }\n        return error;\n    }\n};","import { createInstance, handleError } from \"services/base\"\nimport { buildQueryString } from \"helpers\"\nconst baseUrl = \"/jm_user\"\n\nconst services = createInstance(\"/api\")\nexport const getUser = async (param) => {\n  try {\n    let query = `${baseUrl}`\n    if (param) {\n      query += buildQueryString(param)\n    }\n    const res = await services.get(query)\n    return res\n  } catch (error) {\n    const { request, response } = error\n    if (request) {\n      return request\n    }\n    if (response) {\n      return response\n    }\n    return error\n  }\n}\nexport const getTeamByID = async (id) => {\n  try {\n    let query = `${baseUrl}/${id}`\n    const res = await services.get(query)\n    return res\n  } catch (error) {\n    const { request, response } = error\n    if (request) {\n      return request\n    }\n    if (response) {\n      return response\n    }\n    return error\n  }\n}\nexport const saveUser = async (param) => {\n  try {\n    const query = `${baseUrl}`\n    if (!param.id) {\n      const res = await services.post(query, param)\n      return res\n    } else {\n      const res = await services.put(`${baseUrl}/${param.id}`, param)\n      return res\n    }\n  } catch (error) {\n    const { request, response } = error\n    if (request) {\n      return request\n    }\n    if (response) {\n      return response\n    }\n    return error\n  }\n}\n\n\n\nexport const updateUserStatus = async (param) => {\n  try {\n    const query = `${baseUrl}/status`\n    const res = await services.put(query, param)\n    return res\n  } catch (error) {\n    const { request, response } = error\n    if (request) {\n      return request\n    }\n    if (response) {\n      return response\n    }\n    return error\n  }\n}\nexport const signup = async (param) => {\n  try {\n    const query = `${baseUrl}/signup`\n    const res = await services.post(query, param)\n    return res\n  } catch (error) {\n    const { request, response } = error\n    if (request) {\n      return request\n    }\n    if (response) {\n      return response\n    }\n    return error\n  }\n}\nexport const deleteUser = async (id) => {\n  try {\n    let query = `${baseUrl}/${id}`\n    const res = await services.delete(query)\n    return res\n  } catch (error) {\n    const { request, response } = error\n    if (request) {\n      return request\n    }\n    if (response) {\n      return response\n    }\n    return error\n  }\n}\nexport const sendMailUser = async (param) => {\n  try {\n    const query = `${baseUrl}/add-user`\n    const res = await services.post(query, param)\n    return res\n  } catch (error) {\n    const { request, response } = error\n    if (request) {\n      return request\n    }\n    if (response) {\n      return response\n    }\n    return error\n  }\n}\nexport const validateTokenSignup = async (param) => {\n  try {\n    const query = `${baseUrl}/validate-signup`\n    const res = await services.post(query, param)\n    return res\n  } catch (error) {\n    const { request, response } = error\n    if (request) {\n      return request\n    }\n    if (response) {\n      return response\n    }\n    return error\n  }\n}\n","import { createInstance, handleError } from \"services/base\";\nimport { buildQueryString } from \"helpers\";\nconst baseUrl = \"/sys_filter\";\n\nconst services = createInstance(\"/api\");\nexport const saveFilter = async (param) => {\n  try {\n    const query = `${baseUrl}`;\n    if (!param.id) {\n      const res = await services.post(query, param);\n      return res;\n    } else {\n      const res = await services.put(`${baseUrl}/${param.id}`, param);\n      return res;\n    }\n  } catch (error) {\n    const { request, response } = error;\n    if (request) {\n      return request;\n    }\n    if (response) {\n      return response;\n    }\n    return error;\n  }\n};","import { createInstance, handleError } from \"services/base\"\r\nimport { buildQueryString } from \"helpers\"\r\nimport _ from 'lodash'\r\n\r\nconst services = createInstance(\"/api\")\r\n\r\nexport const save = async (baseUrl, param) => {\r\n  try {\r\n    const query = `${baseUrl}`\r\n    if (_.isEmpty(param.id)) {\r\n      const res = await services.post(query, param)\r\n      return res\r\n    } else {\r\n      const res = await services.put(`${baseUrl}/${param.id}`, param)\r\n      return res\r\n    }\r\n  } catch (error) {\r\n    const { request, response } = error\r\n    if (request) {\r\n      return request\r\n    }\r\n    if (response) {\r\n      return response\r\n    }\r\n    return error\r\n  }\r\n}\r\n\r\nexport const get = async (baseUrl, param = null) => {\r\n  try {\r\n    let query = `${baseUrl}`\r\n    if (param) {\r\n      query += buildQueryString(param)\r\n    }\r\n    const res = await services.get(query)\r\n    return res\r\n  } catch (error) {\r\n    const { request, response } = error\r\n    if (request) {\r\n      return request\r\n    }\r\n    if (response) {\r\n      return response\r\n    }\r\n    return error\r\n  }\r\n}\r\n\r\nexport const getByID = async (baseUrl, id) => {\r\n  try {\r\n    let query = `${baseUrl}/${id}`\r\n    const res = await services.get(query)\r\n    return res\r\n  } catch (error) {\r\n    const { request, response } = error\r\n    if (request) {\r\n      return request\r\n    }\r\n    if (response) {\r\n      return response\r\n    }\r\n    return error\r\n  }\r\n}\r\n\r\nexport const deleteData = async (baseUrl, id) => {\r\n  try {\r\n    let query = `${baseUrl}/${id}`;\r\n    const res = await services.delete(query);\r\n    return res;\r\n  } catch (error) {\r\n    const { request, response } = error;\r\n    if (request) {\r\n      return request;\r\n    }\r\n    if (response) {\r\n      return response;\r\n    }\r\n    return error;\r\n  }\r\n}\r\n\r\nexport const post = async (baseUrl, param) => {\r\n  try {\r\n    const query = `${baseUrl}`\r\n    const res = await services.post(query, param)\r\n    return res\r\n  } catch (error) {\r\n    const { request, response } = error\r\n    if (request) {\r\n      return request\r\n    }\r\n    if (response) {\r\n      return response\r\n    }\r\n    return error\r\n  }\r\n}","export default __webpack_public_path__ + \"static/media/logo-dark.4f80b7d9.svg\";"],"sourceRoot":""}